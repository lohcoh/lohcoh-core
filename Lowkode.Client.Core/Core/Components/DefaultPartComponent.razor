@using Lowkode.Client.Core
@using Microsoft.OpenApi.Models;
@using System.ComponentModel.DataAnnotations;
@typeparam TModel
@inherits PartComponent
@inject ILowkodeExplorer lkExplorer;

<table class="table">
    <thead>
        <tr>
            @foreach (var header in ColumnHeaders)
            {
                <th>@header</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var row in RowValues)
        {
            <tr>
                @foreach (var value in row)
                {
                    <td>@value</td>
                }
            </tr>
        }
        @*
            DateTime DateF = (DateTime)forecast.GetType().GetProperties().First(p => p.Name == "Date").GetMethod.Invoke(forecast, null);
            int TemperatureC = (int)forecast.GetType().GetProperties().First(p => p.Name == "TemperatureC").GetMethod.Invoke(forecast, null);
            int TemperatureF = (int)forecast.GetType().GetProperties().First(p => p.Name == "TemperatureF").GetMethod.Invoke(forecast, null);
            string Summary = (string)forecast.GetType().GetProperties().First(p => p.Name == "Summary").GetMethod.Invoke(forecast, null);
            <tr>
                <td>@DateF.ToShortDateString()</td>
                <td>@TemperatureC</td>
                <td>@TemperatureF</td>
                <td>@Summary</td>
            </tr>
        *@
    </tbody>
</table>

@code {

    List<string> ColumnHeaders = new List<string>();
    List<List<string>> RowValues = new List<List<string>>();


    OpenApiSchema _schema;

    PlaceholderComponent _placeholder;
    [Parameter]
    override public PlaceholderComponent PlaceholderComponent
    {
        set
        {
            _placeholder = value;
            var items = ((DisplayTable<TModel>)_placeholder).Items;
            Items = (IReadOnlyList<TModel>)items;
        }
    }

    public IReadOnlyList<TModel> _items;
    public IReadOnlyList<TModel> Items
    {
        get
        {
            return _items;
        }
        set
        {
            _items = value;
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var TType = typeof(TModel);

        var attributes = _schema = lkExplorer.GetAnnotation<DisplayAttribute>();
        IDictionary<string, OpenApiSchema> _properties;
        Query((openAPI) =>
                {
        // this is a better way of doing queries.
        // The query methods are given expressions and the lowkode explorer is responsible for executing
        // the query.
        // This gives the explorer the ability to filter the results based on any contributed filter and customizations.
        // return LowkodeExplorer.Query(doc => doc.Components.Schemas).First(s => s.Key == nameof(TModel)).Value
        var schemaName = typeof(TModel).Name;
                    return openAPI.Components.Schemas.First(s => s.Key == schemaName).Value;
                });

        var properties = TType.GetProperties();

        foreach (var property in properties)
        {
            DisplayAttribute displayAttributes = lkExplorer.GetAnnotation<DisplayAttribute>(property);
            ColumnHeaders.Add(displayAttributes.Name);
        }

        var itemTypeProperties = typeof(TModel).GetProperties();
        foreach (var forecast in (Items as IReadOnlyList<TModel>))
        {
            var rowValues = new List<string>();
            foreach (var propertyItem in _properties)
            {
                string value = "";

                var propertyInfo = itemTypeProperties.First(p => p.Name.ToLower() == propertyItem.Key.ToLower());
                if (propertyInfo != null)
                {
                    value = propertyInfo.GetMethod.Invoke(forecast, null).ToString();
                }
                rowValues.Add(value);
            }
            RowValues.Add(rowValues);
        }

    }

}
