@using  Lowkode.Client.Core
@typeparam TModel
@inherits PartComponent<TModel>
@inject ILowkodeExplorer lowkodeExplorer

<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var forecast in (Items as IReadOnlyList<TModel>))
        {
            DateTime DateF= (DateTime)forecast.GetType().GetProperties().First(p=>p.Name == "Date").GetMethod.Invoke(forecast, null);
            int TemperatureC= (int)forecast.GetType().GetProperties().First(p=>p.Name == "TemperatureC").GetMethod.Invoke(forecast, null);
            int TemperatureF= (int)forecast.GetType().GetProperties().First(p=>p.Name == "TemperatureF").GetMethod.Invoke(forecast, null);
            string Summary= (string)forecast.GetType().GetProperties().First(p=>p.Name == "Summary").GetMethod.Invoke(forecast, null);
            <tr>
                <td>@DateF.ToShortDateString()</td>
                <td>@TemperatureC</td>
                <td>@TemperatureF</td>
                <td>@Summary</td>
            </tr>
        }
    </tbody>
</table>

@code {

        PlaceholderComponent _placeholder;
    override public PlaceholderComponent PlaceholderComponent {
        set {
            _placeholder = value;
            var items= ((DisplayTable<TModel>)_placeholder).Items;
            Items = (IReadOnlyList<TModel>)items;
        }
    }

    public OpenAPI

    public IReadOnlyList<TModel> _items;
    public IReadOnlyList<TModel> Items {
        get
        {
            return _items;
        }
        set {
            _items = value;
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var schema= lowkodeExplorer.Query((openAPI) =>
        {
            return openAPI.Components.Schemas.First(s => s.Key == nameof(TModel)).Value;
        });

        schema.
    }

}
