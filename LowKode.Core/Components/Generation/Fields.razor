@using LowKode.Core.Configuration
@using LowKode.Core.Metadata
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Rendering
@using System
@namespace LowKode.Core.Components

    @foreach (var property in ModelMetadata.Properties)
    {
        <Scope Context="FieldScope">
            @{
                FieldScope.Update<SiteSpecification>(value =>
                    {
                        var s= (SiteSpecification)value.MemberwiseClone();
                        s.Model = EditContext.Model;
                        s.ModelType = ModelMetadata;
                        s.ModelMember = property.ToMemberPath();
                        return s;
                    });
            }
            @ChildContent
        </Scope>
    }

@code
{
    /// <summary>
    /// Renders the properties of a form model.
    /// Can only be used with an <EditForm/> component.
    /// </summary>

    /// <summary>
    /// The template for rendering properties
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [CascadingParameter]
    EditContext EditContext { get; set; }

    [CascadingParameter]
    IComponentSite Scope { get; set; }


    TypeDescriptor ModelMetadata;
    Type ModelType;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (EditContext == null)
        {
            throw new InvalidOperationException("No EditContext found");
        }

        ModelType = EditContext.Model.GetType();
        ModelMetadata = Scope.GetService<ITypeDescriptorService>().GetTypeDescriptor(ModelType);
    }


}
